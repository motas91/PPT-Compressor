/*! coi-serviceworker v0.1.6 - Guido Zuidhof, licensed under MIT */
if(typeof window === "undefined"){self.addEventListener("install",()=>self.skipWaiting());self.addEventListener("activate",e=>e.waitUntil(self.clients.claim()));self.addEventListener("message",e=>{if(e.data && e.data.type === "deregister")self.registration.unregister().then(()=>{return self.clients.matchAll()}).then(clients=>{clients.forEach(client=>client.navigate(client.url))})});self.addEventListener("fetch",function(e){if(e.request.cache === "only-if-cached" && e.request.mode !== "same-origin")return;const r=e.request.clone();e.respondWith(fetch(r).then(res=>{if(!res.ok)return res;const newHeaders=new Headers(res.headers);newHeaders.set("Cross-Origin-Embedder-Policy","require-corp");newHeaders.set("Cross-Origin-Opener-Policy","same-origin");return new Response(res.body,{status:res.status,statusText:res.statusText,headers:newHeaders})}).catch(err=>{
console.error(err);
return err;
}))})}else{(()=>{const e={shouldRegister:()=>true,shouldDeregister:()=>false,doReload:()=>window.location.reload(),quiet:false,...window.coi};const t=navigator.serviceWorker;if(t&&t.controller&&e.shouldDeregister()){t.controller.postMessage({type:"deregister"});}if(window.crossOriginIsolated !== false || !e.shouldRegister())return;t.register(window.document.currentScript.src).then(r=>{!e.quiet&&console.log("COOP/COEP Service Worker registered",r.scope);r.addEventListener("updatefound",()=>{const n=r.installing;!e.quiet&&console.log("Service Worker update found, will have to reload.",n);n.addEventListener("statechange",()=>{if(n.state === "installed"){!e.quiet&&console.log("Service Worker installed, will have to reload.");e.doReload()}})});if(r.active&&!t.controller){!e.quiet&&console.log("Service Worker active, will have to reload.");e.doReload()}}).catch(t=>{!e.quiet&&console.error("COOP/COEP Service Worker failed to register:",t)})})()}